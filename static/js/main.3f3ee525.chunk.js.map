{"version":3,"sources":["BreadCalculator.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","light","contrastText","tonalOffset","ingredientsLevain","ingredientsLevure","IngredientTable","props","parseInt","chosenRecipe","Farine","percentEau","Eau","percentSel","Sel","quantiteIng","poidsIngredient","finalWater","finalSalt","finalLe","finalFlour","quantiteFarine","percentLe","typeRecette","Levain","Levure","chosenIngredient","console","log","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","id","TableCell","align","TableBody","nomRecipe","Math","round","DynamicTable","levain","RecipeDisplayLevain","RecipeDisplayLevure","row","NomRecette","rowB","PetitPain","state","value","checked","validRecipe","memRecette","checkInput","next","handleChange","bind","handleSelectChange","toggleChecked","handleIngredientChange","event","valeur","target","this","setState","result","data","find","validity","resultBis","dataLevure","validityBis","resultSyncBis","resultSync","modeLevain","chosen","authoNext","ThemeProvider","className","FormControlLabel","control","Switch","color","onChange","label","Autocomplete","options","getOptionLabel","option","style","width","renderInput","params","TextField","variant","error","type","helperText","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3f3ee525.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport data from './data/RecettesLevain.json' // Import d'une variable data qui contient le fichier JSON\r\nimport dataLevure from './data/RecettesLevure.json'\r\nimport {Table , TableBody , TableCell , TableRow , TableContainer , TableHead , Paper , Switch , FormControlLabel , TextField} from '@material-ui/core'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      // light: will be calculated from palette.primary.main,\r\n      main: '#dc9932',\r\n      // dark: will be calculated from palette.primary.main,\r\n      // contrastText: will be calculated to contrast with palette.primary.main\r\n    },\r\n    secondary: {\r\n      light: '#0066ff',\r\n      main: '#0044ff',\r\n      // dark: will be calculated from palette.secondary.main,\r\n      contrastText: '#ffcc00',\r\n    },\r\n    // Used by `getContrastText()` to maximize the contrast between\r\n    // the background and the text.\r\n    tonalOffset: 0.2,\r\n  },\r\n});\r\n\r\nlet ingredientsLevain = [\"Farine\", \"Eau\", \"Sel\", \"Levain\"]\r\nlet ingredientsLevure = [\"Farine\", \"Eau\", \"Sel\", \"Levure\"]\r\n\r\nfunction IngredientTable(props){\r\n\r\n  let percentFarine = parseInt(props.chosenRecipe.Farine) , percentEau = parseInt(props.chosenRecipe.Eau) , percentSel = parseInt(props.chosenRecipe.Sel) , quantiteIng = parseInt(props.poidsIngredient)\r\n  let finalWater = 0 , finalSalt = 0 , finalLe = 0 , finalFlour = 0 , quantiteFarine = 0 , percentLe = 0\r\n  if(props.typeRecette === \"Levain\"){percentLe = parseInt(props.chosenRecipe.Levain)}else if (props.typeRecette === \"Levure\"){percentLe = parseInt(props.chosenRecipe.Levure)}\r\n\r\n  switch (props.chosenIngredient) {\r\n    case \"Farine\":\r\n      finalWater = quantiteIng * (percentEau / 100)\r\n      finalSalt = quantiteIng * (percentSel / 100)\r\n      finalLe = quantiteIng * (percentLe / 100)\r\n      finalFlour = quantiteIng\r\n    break;\r\n\r\n    case \"Sel\":\r\n      quantiteFarine = (quantiteIng * 100) / percentSel\r\n      finalWater = quantiteFarine * (percentEau / 100)\r\n      finalSalt = quantiteFarine * (percentSel / 100)\r\n      finalLe = quantiteFarine * (percentLe / 100)\r\n      finalFlour = quantiteFarine\r\n    break;\r\n\r\n    case \"Eau\":\r\n      quantiteFarine = (quantiteIng * 100) / percentEau\r\n      finalWater = quantiteFarine * (percentEau / 100)\r\n      finalSalt = quantiteFarine * (percentSel / 100)\r\n      finalLe = quantiteFarine * (percentLe / 100)\r\n      finalFlour = quantiteFarine\r\n    break;\r\n\r\n    case \"Levain\" || \"Levure\":\r\n      quantiteFarine = (quantiteIng * 100) / percentLe\r\n      finalWater = quantiteFarine * (percentEau / 100)\r\n      finalSalt = quantiteFarine * (percentSel / 100)\r\n      finalLe = quantiteFarine * (percentLe / 100)\r\n      finalFlour = quantiteFarine\r\n    break;\r\n\r\n    default:\r\n      console.log(\"def\")\r\n  }\r\n\r\n  return(\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"simple table final\">\r\n        <TableHead>\r\n          <TableRow id='tableListFinal'>\r\n            <TableCell>Recette</TableCell>\r\n            <TableCell align=\"right\">Farine</TableCell>\r\n            <TableCell align=\"right\">Eau</TableCell>\r\n            <TableCell align=\"right\">Sel</TableCell>\r\n            <TableCell align=\"right\">{props.typeRecette}</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          <TableRow>\r\n              <TableCell>{props.nomRecipe}</TableCell>\r\n              <TableCell align=\"right\">{Math.round(finalFlour)}g</TableCell>\r\n              <TableCell align=\"right\">{Math.round(finalWater)}g</TableCell>\r\n              <TableCell align=\"right\">{Math.round(finalSalt)}g</TableCell>\r\n              <TableCell align=\"right\">{Math.round(finalLe)}g</TableCell>\r\n            </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  )\r\n\r\n}\r\n\r\nfunction DynamicTable(props){\r\n  if(props.levain){\r\n    return <span><RecipeDisplayLevain chosenRecipe={props.chosenRecipe} /></span>\r\n  }\r\n  else{\r\n    return <RecipeDisplayLevure chosenRecipe={props.chosenRecipe} />\r\n  }\r\n}\r\n\r\nfunction RecipeDisplayLevain(props){\r\nlet row = props.chosenRecipe\r\n    return( <TableContainer component={Paper}>\r\n      <Table aria-label=\"simple table levain\">\r\n        <TableHead>\r\n          <TableRow id='tableListLevain'>\r\n            <TableCell>Recette</TableCell>\r\n            <TableCell align=\"right\">Farine</TableCell>\r\n            <TableCell align=\"right\">Eau</TableCell>\r\n            <TableCell align=\"right\">Sel</TableCell>\r\n            <TableCell align=\"right\">Levain</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          <TableRow>\r\n              <TableCell>{row.NomRecette}</TableCell>\r\n              <TableCell align=\"right\">{row.Farine}%</TableCell>\r\n              <TableCell align=\"right\">{row.Eau}%</TableCell>\r\n              <TableCell align=\"right\">{row.Sel}%</TableCell>\r\n              <TableCell align=\"right\">{row.Levain}%</TableCell>\r\n            </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  )\r\n}\r\n\r\nfunction RecipeDisplayLevure(props){\r\n  let rowB = props.chosenRecipe\r\n      return( <TableContainer component={Paper}>\r\n        <Table aria-label=\"simple table levure\">\r\n          <TableHead>\r\n            <TableRow id='tableListLevure'>\r\n              <TableCell>Recette</TableCell>\r\n              <TableCell align=\"right\">Farine</TableCell>\r\n              <TableCell align=\"right\">Eau</TableCell>\r\n              <TableCell align=\"right\">Sel</TableCell>\r\n              <TableCell align=\"right\">Levure</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            <TableRow>\r\n                <TableCell>{rowB.NomRecette}</TableCell>\r\n                <TableCell align=\"right\">{rowB.Farine}%</TableCell>\r\n                <TableCell align=\"right\">{rowB.Eau}%</TableCell>\r\n                <TableCell align=\"right\">{rowB.Sel}%</TableCell>\r\n                <TableCell align=\"right\">{rowB.Levure}%</TableCell>\r\n              </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    )\r\n}\r\n\r\nclass PetitPain extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: '' , chosenRecipe:\"\" , checked:false , validRecipe:false , memRecette:\"\" , chosenIngredient:\"\" , checkInput:false , typeRecette:\"\" , next:false};\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSelectChange = this.handleSelectChange.bind(this); // Création d'un hook spécifique au menu déroulant\r\n    this.toggleChecked = this.toggleChecked.bind(this);\r\n    this.handleIngredientChange = this.handleIngredientChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    let valeur = event.target.value\r\n\r\n    if(valeur === \"\"){\r\n      this.setState({checkInput:true})\r\n    }else{\r\n      this.setState({value: valeur , checkInput:false , next:true})\r\n    }\r\n  }\r\n\r\n  handleSelectChange(event , value){\r\n\r\n    if(this.state.checked){\r\n      let result = data.find(result => result.NomRecette === value.NomRecette) , validity = false // Récupère le changement de selectBox\r\n      if(typeof(result) === \"object\"){\r\n        validity = true\r\n        this.setState({chosenRecipe:result , validRecipe:validity , memRecette:result.NomRecette , typeRecette:\"Levain\"})\r\n      }else{\r\n        validity = false\r\n        this.setState({validRecipe:validity})}\r\n\r\n    }else{\r\n      let resultBis = dataLevure.find(resultBis => resultBis.NomRecette === value.NomRecette) , validityBis = false\r\n      if(typeof(resultBis) === \"object\"){\r\n        validityBis = true\r\n        this.setState({chosenRecipe:resultBis , validRecipe:validityBis , memRecette:resultBis.NomRecette , typeRecette:\"Levure\"})\r\n      }else{\r\n        validityBis = false\r\n        this.setState({validRecipe:validityBis})}\r\n    }\r\n  }\r\n\r\n  handleIngredientChange(event , value){\r\n    this.setState({chosenIngredient:value})\r\n  }\r\n\r\n  toggleChecked(event){\r\n    if(this.state.checked){this.setState({checked:false})}\r\n    else{this.setState({checked:true})}\r\n\r\n    if(this.state.validRecipe === true){\r\n      if(this.state.checked){\r\n        let resultSyncBis = dataLevure.find(resultSyncBis => resultSyncBis.NomRecette === this.state.memRecette)\r\n        this.setState({chosenRecipe:resultSyncBis , typeRecette : \"Levure\"})\r\n      }else{\r\n        let resultSync = data.find(resultSync => resultSync.NomRecette === this.state.memRecette)\r\n        this.setState({chosenRecipe:resultSync , typeRecette: \"Levain\"})\r\n        }\r\n      }\r\n  }\r\n\r\n  render() {\r\n\r\n    const chosenRecipe = this.state.chosenRecipe\r\n    const validRecipe = this.state.validRecipe\r\n    const modeLevain = this.state.checked\r\n    const checkInput = this.state.checkInput\r\n    const typeRecette = this.state.typeRecette\r\n    const poidsIngredient = this.state.value\r\n    const nomRecipe = this.state.memRecette\r\n    const chosen = this.state.chosenIngredient\r\n    const authoNext = this.state.next\r\n\r\n    return (\r\n\r\n      <ThemeProvider theme={theme}>\r\n      <div className=\"App-header\">\r\n\r\n      <FormControlLabel\r\n      control={<Switch color={\"primary\"} onChange={this.toggleChecked}/>}\r\n      label={modeLevain ? \"Mode levain activé!\" : \"Activer le mode levain?\"}\r\n      />\r\n\r\n      <p></p>\r\n\r\n      <Autocomplete\r\n      id=\"recette-select\"\r\n      options={data}\r\n      getOptionLabel={(option) => option.NomRecette}\r\n      style={{ width: 250 }}\r\n      renderInput={(params) => <TextField {...params} label=\"Recette\" variant=\"outlined\" />}\r\n      color=\"secondary\"\r\n      onChange={this.handleSelectChange}\r\n      />\r\n\r\n      <p></p>\r\n\r\n      <div>{validRecipe\r\n      ? <DynamicTable levain={modeLevain} chosenRecipe={chosenRecipe} />\r\n      : \"Recette non sélectionnée\"}</div>\r\n\r\n      <p></p>\r\n\r\n      <Autocomplete\r\n      id=\"ingredient-select\"\r\n      options={modeLevain ? ingredientsLevain : ingredientsLevure}\r\n      getOptionLabel={(option) => option}\r\n      style={{ width: 250 }}\r\n      renderInput={(params) => <TextField {...params} label=\"Ingrédient\" variant=\"outlined\" />}\r\n      color=\"secondary\"\r\n      onChange={this.handleIngredientChange}\r\n      />\r\n\r\n      <p></p>\r\n\r\n      <TextField\r\n        error={checkInput}\r\n        id=\"standard-number\"\r\n        label=\"Poids (g)\"\r\n        type=\"number\"\r\n        variant=\"outlined\"\r\n        helperText={checkInput ? \"Veuillez entrer un chiffre correct\" : \"\" }\r\n        onChange={this.handleChange}\r\n      />\r\n\r\n      <p></p>\r\n\r\n      {authoNext\r\n        ? <IngredientTable typeRecette={typeRecette} poidsIngredient={poidsIngredient} chosenIngredient={chosen} nomRecipe={nomRecipe} chosenRecipe={chosenRecipe}/>\r\n        : \"\"\r\n      }\r\n\r\n\r\n    </div>\r\n    </ThemeProvider>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default PetitPain;\r\n","import React from 'react';\nimport './App.css';\nimport PetitPain from './BreadCalculator.js'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <PetitPain />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}